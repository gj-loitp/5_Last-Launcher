apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion 33

    defaultConfig {
        applicationId "com.roy93group.quicklauncher"
        minSdkVersion 19
        targetSdkVersion 33
        versionCode 20230103
        versionName "2023.01.03"
    }
    signingConfigs {
        release {
            storeFile file("keystore.jks")
            storePassword KS_PW
            keyAlias KS_ALIAS
            keyPassword KS_PW
        }
    }
    buildTypes {
        debug {
//            def workingBranch = getGitWorkingBranch()
//            def normalizedWorkingBranch = workingBranch.replaceFirst("^[^A-Za-z]+", "").replaceAll("[^0-9A-Za-z]+", "")
//            if (normalizedWorkingBranch.isEmpty() || workingBranch == "master") {
//                applicationIdSuffix ".debug"
//                resValue "string", "app_name", "Quick Launcher Dev"
//            } else {
//                archivesBaseName = 'Quick_Launcher_' + normalizedWorkingBranch
//                applicationIdSuffix ".debug." + normalizedWorkingBranch
//                resValue "string", "app_name", "Quick Launcher-" + workingBranch
//            }
            debuggable true
            jniDebuggable true
//            versionNameSuffix "-debug"
            minifyEnabled false
            shrinkResources false
        }
        release {
            debuggable false
            jniDebuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
//            resValue "string", "app_name", "Quick Launcher"
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def date = new Date()
            def formattedDate = date.format('yyyyMMddHHmmss')
            outputFileName = "Quick-Launcher-${variant.name}-${variant.versionName}-${formattedDate}.apk"
        }
    }
    packagingOptions {
    }
    lint {
        abortOnError false
        checkReleaseBuilds false
    }
    buildFeatures {
        viewBinding true
    }
    namespace 'com'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation project(':flowlayout:layouts')
    implementation 'com.github.promeg:tinypinyin:2.0.3'
//    testImplementation 'junit:junit:4.13.2'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.10'
    api 'org.jetbrains.kotlin:kotlin-stdlib:1.8.10'
//    implementation 'com.github.rtugeek:colorseekbar:2.0.3'
    api 'androidx.cardview:cardview:1.0.0'
    api 'com.github.valkriaine:Bouncy:2.3'

    api platform('com.google.firebase:firebase-bom:31.0.2')
    api 'com.google.firebase:firebase-analytics-ktx'
    api 'com.google.firebase:firebase-crashlytics-ktx'
    api 'com.google.firebase:firebase-config-ktx'
//    https://github.com/pwittchen/RxBiometric
    api 'com.github.pwittchen:rxbiometric:0.1.0'
    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.10'
}

//static String getGitWorkingBranch() {
//    try {
//        def gitProcess = "git rev-parse --abbrev-ref HEAD".execute()
//        gitProcess.waitFor()
//        if (gitProcess.exitValue() == 0) {
//            return gitProcess.text.trim()
//        } else {
//            // .git folder not present
//            return ""
//        }
//    } catch (IOException ignored) {
//        // git is not installed
//        return ""
//    }
//}
